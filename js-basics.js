// Что такое Temporal Dead Zone (TDZ)?
/* 
  TDZ (Временная Мертвая Зона) — это период между входом в область видимости и моментом инициализации переменной, 
  когда к переменной нельзя обратиться.

  В ES6 был введен TDZ, чтобы предотвратить ошибки в коде, например, когда переменная объявлена до ее использования.

  TDZ начинается с момента объявления переменной и заканчивается моментом инициализации переменной.
*/

// Разница между var, let и const

/* 
  var, это единственный способ объявлять переменные до ES6. var function-scoped.
  let и const - block scoped.

  var поддается hoisting'у, становится undefined по дефолту, можно переопределить.
  let и const не поддается hoisting'у, ну или точнее они попадает в TDZ, то есть "поднятие" происходит, 
  но инициализации не происходит и в случае обращения будет ReferenceError.

  Когда вы объявляете переменную с помощью var в глобальной области видимости (то есть не внутри функции), 
  она автоматически становится свойством глобального объекта window.
  
  
*/

// Типы данных в JavaScript

// Примитивные типы данных - это отдельные значения, которые не могут быть изменены

// Number
// String
// Boolean
// Undefined
// Null
// Symbol
// BigInt

// Непримитивные типы данных - это значения, которые могут быть изменены, object

// Array
// Object
// Function

// Разница между == и ===

/* 
  == - сравнение по значению, нестрогое сравнение, с приведением типов,

  === - сравнение по значению и типу, строгое сравнение, без приведения типов

*/

// Что такое hoisting (поднятие)?
/* 
  Hoisting (поднятие) - это механизм в JavaScript, при котором объявления переменных и функций "поднимаются" 
  в верхнюю часть своей области видимости перед выполнением кода.
  Важно: Поднимаются именно объявления, а не инициализации!

  например в этом примере:

  console.log(a); // undefined, выведет undefined, т.к. переменная объявлена, но не инициализирована
  var a = 5;

  но, в этом примере например, вначале, на этапе компиляции var a = undefinded, как и в прошлом примере, 
  но a = 3 сработает на этапе выполнения последним:

  a = 5;
  console.log(a); //в консоли выведется 5, a = 3 пока еще не произошло,
  var a = 3;
*/

// Что такое строгий режим (strict mode)?
/* Strict mode (строгий режим) — это режим в JavaScript, который делает код более безопасным 
и предотвращает некоторые распространенные ошибки. Он был введен в ES5. 

Запрет на необъявленные переменные
Запрет дублирования параметров
Запрет на удаление переменных, функций и аргументов
Изменение поведения this
Запрет восьмеричных литералов
Запрет на запись в read-only свойства
Запрет использования with
Запрет использования arguments.callee
*/

// Разница между null и undefined

/* 
  undefined:
    Переменная объявлена, но не инициализирована
    Возвращается из функций без return
    Несуществующее свойство объекта
    Явно можно присвоить: let a = undefined

null:
  Явное указание на "отсутствие значения"
  Используется для очистки ссылок на объекты
*/

// Что такое псевдомассив arguments?

/* 
  Псевдомассив arguments — это специальный объект, доступный внутри обычных функций (не стрелочных!), 
  который содержит все переданные в функцию аргументы.
*/